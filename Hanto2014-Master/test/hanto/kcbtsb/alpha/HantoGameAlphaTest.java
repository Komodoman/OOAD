package hanto.kcbtsb.alpha;

import static org.junit.Assert.*;

import org.junit.Test;

import hanto.HantoGameFactory;
import hanto.common.HantoException;
import hanto.common.HantoGameID;
import hanto.common.HantoPieceType;
import hanto.common.MoveResult;
import hanto.kcbtsb.common.HantoCell;
import hanto.kcbtsb.common.HantoGameManager;

/**
 * The class <code>HantoCellManagerTest</code> contains tests for the class
 * {@link <code>HantoCellManager</code>}
 *
 * @pattern JUnit Test Case
 *
 * @generatedBy CodePro at 9/9/14 4:37 PM
 *
 * @author Kyle
 *
 * @version $Revision$
 */
public class HantoGameAlphaTest{

	
	@Test
	public void blueShouldPlaceButterfly() throws HantoException {
		HantoGameManager manager = HantoGameManager.getInstance();
		HantoGameFactory.getInstance();
		HantoGameFactory.makeHantoGame(HantoGameID.ALPHA_HANTO);
		MoveResult result = manager.getBluePlayer().placePiece(HantoPieceType.BUTTERFLY, new HantoCell(0,0));
		assertTrue("Should place butterfly: ", result == MoveResult.OK);
	}
	
	@Test(expected=HantoException.class)
	public void exceptionRedShouldFailFirstMove() throws HantoException {
		HantoGameManager manager = HantoGameManager.getInstance();
		HantoGameFactory.getInstance();
		HantoGameFactory.makeHantoGame(HantoGameID.ALPHA_HANTO);
		manager.getRedPlayer().placePiece(HantoPieceType.BUTTERFLY, new HantoCell(0,0));
	}
	
	@Test(expected=HantoException.class)
	public void exceptionRedShouldFailPlaceButterfly() throws HantoException {
		HantoGameManager manager = HantoGameManager.getInstance();
		HantoGameFactory.getInstance();
		HantoGameFactory.makeHantoGame(HantoGameID.ALPHA_HANTO);
		manager.getBluePlayer().placePiece(HantoPieceType.BUTTERFLY, new HantoCell(0,0));
		manager.getRedPlayer().placePiece(HantoPieceType.BUTTERFLY, new HantoCell(0,0));
	}
	
	@Test(expected=HantoException.class)
	public void exceptionBlueShouldFailPlaceButterfly() throws HantoException {
		HantoGameManager manager = HantoGameManager.getInstance();
		HantoGameFactory.getInstance();
	    HantoGameFactory.makeHantoGame(HantoGameID.ALPHA_HANTO);
		MoveResult result = manager.getBluePlayer().placePiece(HantoPieceType.BUTTERFLY, new HantoCell(1, 1));
	}
	
	@Test
	public void redShouldPlaceButterflyAndDraw() throws HantoException {
		HantoGameManager manager = HantoGameManager.getInstance();
		HantoGameFactory.getInstance();
		HantoGameFactory.makeHantoGame(HantoGameID.ALPHA_HANTO);
		manager.getBluePlayer().placePiece(HantoPieceType.BUTTERFLY, new HantoCell(0, 0));
		MoveResult result = manager.getRedPlayer().placePiece(HantoPieceType.BUTTERFLY, new HantoCell(1, 1));
		System.out.println("____" + result + "____");
		assertTrue("Should place butterfly: ", result == MoveResult.DRAW);
	}
	
	@Test(expected=HantoException.class)
	public void exceptionRedShouldFailPlaceNonContiguousButterfly() throws HantoException {
		HantoGameManager manager = HantoGameManager.getInstance();
		HantoGameFactory.getInstance();
		HantoGameFactory.makeHantoGame(HantoGameID.ALPHA_HANTO);
		manager.getBluePlayer().placePiece(HantoPieceType.BUTTERFLY, new HantoCell(0, 0));
		MoveResult result = manager.getRedPlayer().placePiece(HantoPieceType.BUTTERFLY, new HantoCell(2, 1));
		System.out.println("____" + result + "____");
	}
	
}

/*$CPS$ This comment was generated by CodePro. Do not edit it.
 * patternId = com.instantiations.assist.eclipse.pattern.testCasePattern
 * strategyId = com.instantiations.assist.eclipse.pattern.testCasePattern.junitTestCase
 * additionalTestNames = 
 * assertTrue = false
 * callTestMethod = true
 * createMain = false
 * createSetUp = false
 * createTearDown = false
 * createTestFixture = false
 * createTestStubs = false
 * methods = 
 * package = 
 * package.sourceFolder = Hanto2014-Master/test
 * superclassType = junit.framework.TestCase
 * testCase = HantoCellManagerTest
 * testClassType = hanto.kcbtsb.alpha.HantoCellManager
 */